# METABEGIN
# X-Env-Layer-Name: network
# X-Env-Layer-Category: layer
# X-Env-Layer-Desc: Configures Ethernet + Wi-Fi network with AP mode and DHCP server on Raspberry Pi
# X-Env-Layer-Requires: login
# METAEND
---
mmdebstrap:
  packages:
    - dnsmasq
    - hostapd
    - iptables
    - iw
    - iproute2
    - procps

  customize-hooks:
    # Enable hostapd and dnsmasq
    - |-
      chroot $1 sh -c "
        systemctl unmask dnsmasq
        systemctl enable dnsmasq
        systemctl unmask hostapd
        systemctl enable hostapd 
      "

    # Create dnsmasq configuration
    - |-
      cat <<'EOF' > $1/etc/dnsmasq.conf
      interface=wlan0
      dhcp-range=wlan0,192.168.50.10,192.168.50.100,12h
      dhcp-option=wlan0,option:router,192.168.50.1

      interface=end0
      dhcp-range=end0,192.168.60.10,192.168.60.100,12h
      dhcp-option=end0,option:router,192.168.60.1

      address=/digilink.lan/192.168.50.1
      address=/config.lan/192.168.50.1
      address=/backend.lan/192.168.50.1

      dhcp-authoritative
      dhcp-leasefile=/var/lib/misc/dnsmasq.leases
      EOF

    # Create hostapd configuration
    - |-
      cat <<EOF > $1/etc/hostapd/hostapd.conf
      interface=wlan0
      driver=nl80211
      ssid=DigiLinkOnPremDemo
      hw_mode=g
      channel=6
      macaddr_acl=0
      auth_algs=1
      ignore_broadcast_ssid=0
      wpa=3
      wpa_passphrase=DigiLink
      wpa_key_mgmt=WPA-PSK
      wpa_pairwise=TKIP
      rsn_pairwise=CCMP
      EOF


    # Add a boot-time setup script for NetworkManager connections
    - |-
      cat <<'EOF' > $1/usr/local/bin/setup-network.sh
      #!/bin/bash
      set -e

      ip link set wlan0 down
      ip addr flush dev wlan0
      ip link set wlan0 up
      ip addr add 192.168.50.1/24 dev wlan0

      ip link set end0 down
      ip addr flush dev end0
      ip link set end0 up
      ip addr add 192.168.60.1/24 dev end0

      sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
      sysctl -p

      echo "[setup-network] Done."
      EOF

      chmod +x $1/usr/local/bin/setup-network.sh

    # Add a systemd one-shot service that runs setup-network.sh once on first boot
    - |-
      cat <<'EOF' > $1/etc/systemd/system/setup-network.service
      [Unit]
      Description=Initial NetworkManager configuration
      After=NetworkManager.service
      ConditionPathExists=!/var/lib/setup-network.done

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/setup-network.sh
      ExecStartPost=/bin/touch /var/lib/setup-network.done

      [Install]
      WantedBy=multi-user.target
      EOF

      chroot $1 sh -c "systemctl enable setup-network.service"
